{"version":3,"sources":["Button.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","add","sort","className","onClick","Component","Todo","list","lists","map","key","id","type","created_at","toLocaleTimeString","App","addTo","status","state","counter","Date","newList","setState","toSort","x","y","toDelete","index","findIndex","val","splice","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAEqBA,E,uKACT,IAAD,EACaC,KAAKC,MAAlBC,EADA,EACAA,IAAKC,EADL,EACKA,KACZ,OACE,yBAAKC,UAAU,UACb,4BAAQC,QAAS,kBAAMH,GAAI,KAA3B,oBACA,4BAAQG,QAAS,kBAAMH,GAAI,KAA3B,kBACA,4BAAQG,QAAS,kBAAMF,GAAK,KAA5B,oBACA,4BAAQE,QAAS,kBAAMF,GAAK,KAA5B,uB,GAR4BG,aCAfC,E,uKACT,IAAD,EACiBP,KAAKC,MAAtBO,EADA,EACAA,KAAMH,EADN,EACMA,QACPI,EAAQD,EAAKE,KAAI,SAACF,GAAD,OACrB,wBAAIG,IAAKH,EAAKI,IACZ,4BAAKJ,EAAKI,IACV,4BACE,2BAAOC,KAAK,UAEd,4BACGL,EAAKM,WAAWC,sBAEnB,4BACE,4BAAQV,QAAS,kBAAMA,EAAQG,EAAKI,MAApC,eAIN,OACE,yBAAKR,UAAU,UACb,+BACE,+BACE,4BACE,kCACA,qCACA,yCACA,wCAGJ,+BACGK,S,GA7BqBH,aCGbU,G,wDACnB,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAaRgB,MAAQ,SAACC,GAAY,IAAD,EACM,EAAKC,MAAtBC,EADW,EACXA,QAASZ,EADE,EACFA,KACVI,EAAKQ,EAAU,EACfN,EAAa,IAAIO,KACjBC,EAAUJ,EAAM,sBAAOV,GAAP,CAAa,CAAEI,KAAIE,gBAAnB,CAAsC,CAAEF,KAAIE,eAA5C,mBAA6DN,IACnF,EAAKe,SAAS,CACZH,QAAUR,EACVJ,KAAOc,KArBQ,EAyBnBE,OAAS,SAACN,GAAY,IACbV,EAAQ,EAAKW,MAAbX,KACDc,EAAU,YAAId,GAAML,MAAK,SAACsB,EAAGC,GAAJ,OAC7BR,EAASO,EAAEb,GAAKc,EAAEd,GAAKc,EAAEd,GAAKa,EAAEb,MAElC,EAAKW,SAAS,CAACf,KAAOc,KA9BL,EAiCnBK,SAAW,SAACf,GAAQ,IACXJ,EAAQ,EAAKW,MAAbX,KACDoB,EAAQpB,EAAKqB,WAAU,SAACC,GAAD,OAAUlB,IAAOkB,EAAIlB,MAClDJ,EAAKuB,OAAOH,EAAO,GACnB,EAAKL,SAAS,CAACf,UAlCf,EAAKW,MAAQ,CACXC,QAAU,EACVZ,KAAO,CACL,CACEI,GAAK,EACLE,WAAa,IAAIO,QARN,E,qDAwCT,IAAD,OACAb,EAAQR,KAAKmB,MAAbX,KACP,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAQF,IAAK,SAAC8B,GAAD,OAAO,EAAKf,MAAMe,IAAI7B,KAAM,SAAC6B,GAAD,OAAO,EAAKR,OAAOQ,OAE9D,kBAAC,EAAD,CAAMxB,KAAMA,EAAOH,QAAS,SAAC2B,GAAD,OAAO,EAAKL,SAASK,Y,GAjD1B1B,cCOb2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7d70b19.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Button extends Component {\n  render() {\n    const {add, sort} = this.props;\n    return (\n      <div className=\"button\">\n        <button onClick={() => add(false)}>Add New To Start</button>\n        <button onClick={() => add(true)}>Add New To End</button>\n        <button onClick={() => sort(true)}>Sort By Earliest</button>\n        <button onClick={() => sort(false)}>Sort By Latest</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Todo extends Component {\n  render() {\n    const {list, onClick} = this.props;\n    const lists = list.map((list) => (\n      <tr key={list.id}>\n        <td>{list.id}</td>\n        <td>\n          <input type=\"text\"/>\n        </td>\n        <td>\n          {list.created_at.toLocaleTimeString()}\n        </td>\n        <td>\n          <button onClick={() => onClick(list.id)}>Delete</button>\n        </td>\n      </tr>\n    ));\n    return (\n      <div className=\"button\">\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Input</th>\n              <th>Crated At</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {lists}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Button from './Button';\nimport Todo from './Todo';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      counter : 1,\n      list : [\n        {\n          id : 1,\n          created_at : new Date(),\n        },\n      ],\n    };\n  }\n\n  addTo = (status) => {\n    const {counter, list} = this.state;\n    const id = counter + 1;\n    const created_at = new Date();\n    const newList = status ? [...list, { id, created_at } ] : [ { id, created_at }, ...list ]; \n    this.setState({\n      counter : id,\n      list : newList,\n    });\n  }\n\n  toSort = (status) => {\n    const {list} = this.state;\n    const newList = [...list].sort((x, y) => (\n      status ? x.id - y.id : y.id - x.id\n    ));\n    this.setState({list : newList});\n  }\n\n  toDelete = (id) => {\n    const {list} = this.state;\n    const index = list.findIndex((val) => (id === val.id));\n    list.splice(index, 1);\n    this.setState({list});\n  }\n  \n  render() {\n    const {list} = this.state;\n    return (\n      <div className=\"app\">\n        <div className=\"app__body\">\n          <div className=\"app__btn\">\n            <Button add={(e) => this.addTo(e)} sort={(e) => this.toSort(e)}/>\n          </div>\n          <Todo list={list}  onClick={(e) => this.toDelete(e)} />\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}